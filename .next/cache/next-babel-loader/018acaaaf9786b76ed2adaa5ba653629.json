{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { DECREMENT_COUNTER, INCREMENT_COUNTER } from \"../actions/actions\";\nvar initState = {\n  value: 0\n};\n\nvar counterReducer = function counterReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case INCREMENT_COUNTER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        value: state.value + 1\n      });\n\n    case DECREMENT_COUNTER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        value: state.value - 1\n      });\n\n    default:\n      return _objectSpread({}, state);\n  }\n};\n\nexport default counterReducer;","map":{"version":3,"sources":["/Users/user/Documents/developing/workPreparing/mynextredux/redux/reducers/counterReducer.js"],"names":["DECREMENT_COUNTER","INCREMENT_COUNTER","initState","value","counterReducer","state","action","type"],"mappings":";;;;;;AAAA,SAAQA,iBAAR,EAA2BC,iBAA3B,QAAmD,oBAAnD;AAEA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAE;AADS,CAAlB;;AAIA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAA+B;AAAA,MAA9BC,KAA8B,uEAAtBH,SAAsB;AAAA,MAAXI,MAAW;;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,iBAAL;AACE,6CAAWI,KAAX;AAAkBF,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,GAAc;AAAvC;;AACF,SAAKH,iBAAL;AACE,6CAAWK,KAAX;AAAkBF,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,GAAc;AAAvC;;AACF;AACE,+BAAWE,KAAX;AANJ;AAQD,CATD;;AAWA,eAAeD,cAAf","sourcesContent":["import {DECREMENT_COUNTER, INCREMENT_COUNTER} from \"../actions/actions\";\n\nconst initState = {\n  value: 0\n}\n\nconst counterReducer = (state = initState, action) => {\n  switch (action.type) {\n    case INCREMENT_COUNTER:\n      return {...state, value: state.value + 1}\n    case DECREMENT_COUNTER:\n      return {...state, value: state.value - 1}\n    default:\n      return {...state}\n  }\n}\n\nexport default counterReducer"]},"metadata":{},"sourceType":"module"}